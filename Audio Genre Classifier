{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":1032238,"sourceType":"datasetVersion","datasetId":568973}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install tensorflow_hub\n!pip install librosa","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:49:03.331471Z","iopub.execute_input":"2025-04-02T23:49:03.331778Z","iopub.status.idle":"2025-04-02T23:49:12.224508Z","shell.execute_reply.started":"2025-04-02T23:49:03.331743Z","shell.execute_reply":"2025-04-02T23:49:12.223623Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: tensorflow_hub in /usr/local/lib/python3.10/dist-packages (0.16.1)\nRequirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow_hub) (1.26.4)\nRequirement already satisfied: protobuf>=3.19.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow_hub) (3.20.3)\nRequirement already satisfied: tf-keras>=2.14.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow_hub) (2.17.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.12.0->tensorflow_hub) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.12.0->tensorflow_hub) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.12.0->tensorflow_hub) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.12.0->tensorflow_hub) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.12.0->tensorflow_hub) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.12.0->tensorflow_hub) (2.4.1)\nRequirement already satisfied: tensorflow<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tf-keras>=2.14.1->tensorflow_hub) (2.17.1)\nRequirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (1.4.0)\nRequirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (1.6.3)\nRequirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (24.3.25)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.6.0)\nRequirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.2.0)\nRequirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.12.1)\nRequirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (18.1.1)\nRequirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.4.1)\nRequirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.4.0)\nRequirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (24.2)\nRequirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (2.32.3)\nRequirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (75.1.0)\nRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (1.17.0)\nRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (2.5.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (4.12.2)\nRequirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (1.17.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (1.68.1)\nRequirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (2.17.1)\nRequirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.5.0)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.37.1)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.12.0->tensorflow_hub) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.12.0->tensorflow_hub) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.12.0->tensorflow_hub) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.12.0->tensorflow_hub) (2024.2.0)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.45.1)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.12.0->tensorflow_hub) (2024.2.0)\nRequirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (13.9.4)\nRequirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.0.8)\nRequirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.13.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (2025.1.31)\nRequirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.7)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.1.3)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.0.2)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (2.19.1)\nRequirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow<2.18,>=2.17->tf-keras>=2.14.1->tensorflow_hub) (0.1.2)\nRequirement already satisfied: librosa in /usr/local/lib/python3.10/dist-packages (0.10.2.post1)\nRequirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa) (3.0.1)\nRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.26.4)\nRequirement already satisfied: scipy>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.13.1)\nRequirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.2.2)\nRequirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.4.2)\nRequirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.4.2)\nRequirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.60.0)\nRequirement already satisfied: soundfile>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.12.1)\nRequirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.8.2)\nRequirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.5.0.post1)\nRequirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.12.2)\nRequirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.4)\nRequirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.1.0)\nRequirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from lazy-loader>=0.1->librosa) (24.2)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.51.0->librosa) (0.43.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2.4.1)\nRequirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (4.3.6)\nRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (2.32.3)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\nRequirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile>=0.12.1->librosa) (1.17.1)\nRequirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2025.1.31)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3->librosa) (2024.2.0)\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import librosa\nimport numpy as np\n\ndef extract_features(file_path, n_mfcc=13, n_chroma=12, n_contrast=4):  \n    \"\"\"\n    Extract audio features from a file using Librosa\n    Returns a dictionary of features\n    \"\"\"\n    try:\n        y, sr = librosa.load(file_path, duration=30)  # Load first 30 seconds\n        features = {}\n        \n        # MFCCs (Mel-frequency cepstral coefficients)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)\n        features['mfcc_mean'] = np.mean(mfcc, axis=1)\n        features['mfcc_std'] = np.std(mfcc, axis=1)\n        \n        # Chroma features\n        chroma = librosa.feature.chroma_stft(y=y, sr=sr, n_chroma=n_chroma)\n        features['chroma_mean'] = np.mean(chroma, axis=1)\n        features['chroma_std'] = np.std(chroma, axis=1)\n        \n        # Spectral contrast - with safer parameters\n        contrast = librosa.feature.spectral_contrast(y=y, sr=sr, n_bands=n_contrast, fmin=200.0)\n        features['contrast_mean'] = np.mean(contrast, axis=1)\n        features['contrast_std'] = np.std(contrast, axis=1)\n        \n        # Tonnetz (tonal centroid features)\n        tonnetz = librosa.feature.tonnetz(y=y, sr=sr)\n        features['tonnetz_mean'] = np.mean(tonnetz, axis=1)\n        features['tonnetz_std'] = np.std(tonnetz, axis=1)\n        \n        # Zero crossing rate\n        features['zcr'] = np.mean(librosa.feature.zero_crossing_rate(y))\n        \n        # Spectral centroid\n        features['centroid'] = np.mean(librosa.feature.spectral_centroid(y=y, sr=sr))\n        \n        # Spectral bandwidth\n        features['bandwidth'] = np.mean(librosa.feature.spectral_bandwidth(y=y, sr=sr))\n        \n        # Spectral rolloff\n        features['rolloff'] = np.mean(librosa.feature.spectral_rolloff(y=y, sr=sr))\n        \n        # RMS energy\n        features['rms'] = np.mean(librosa.feature.rms(y=y))\n        \n        return features\n    \n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:49:12.225503Z","iopub.execute_input":"2025-04-02T23:49:12.225797Z","iopub.status.idle":"2025-04-02T23:49:12.249124Z","shell.execute_reply.started":"2025-04-02T23:49:12.225773Z","shell.execute_reply":"2025-04-02T23:49:12.248516Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import os\nimport pandas as pd\nfrom tqdm import tqdm\n\ndef create_dataset(audio_dir, genres):\n    data = []\n    \n    for genre in genres:\n        genre_dir = os.path.join(audio_dir, genre)\n        if not os.path.exists(genre_dir):\n            continue\n            \n        print(f\"Processing {genre} files...\")\n        for file in tqdm(os.listdir(genre_dir)):\n            if file.endswith('.wav') or file.endswith('.mp3'):\n                file_path = os.path.join(genre_dir, file)\n                features = extract_features(file_path)\n                if features:\n                    features['genre'] = genre\n                    data.append(features)\n    \n    return pd.DataFrame(data)\n\ngenres = ['hiphop', 'blues', 'jazz']  \ndf = create_dataset('/kaggle/input/gtzan-dataset-music-genre-classification/Data/genres_original', genres)\n\n# Save the features for later use\ndf.to_csv('/kaggle/working/audio_features.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:49:12.250447Z","iopub.execute_input":"2025-04-02T23:49:12.250643Z","iopub.status.idle":"2025-04-02T23:54:07.579085Z","shell.execute_reply.started":"2025-04-02T23:49:12.250626Z","shell.execute_reply":"2025-04-02T23:54:07.578314Z"}},"outputs":[{"name":"stdout","text":"Processing hiphop files...\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 100/100 [01:48<00:00,  1.09s/it]\n","output_type":"stream"},{"name":"stdout","text":"Processing blues files...\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 100/100 [01:32<00:00,  1.08it/s]\n","output_type":"stream"},{"name":"stdout","text":"Processing jazz files...\n","output_type":"stream"},{"name":"stderr","text":" 26%|██▌       | 26/100 [00:24<01:09,  1.06it/s]<ipython-input-2-77bec5f2f836>:10: UserWarning: PySoundFile failed. Trying audioread instead.\n  y, sr = librosa.load(file_path, duration=30)  # Load first 30 seconds\n/usr/local/lib/python3.10/dist-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load\n\tDeprecated as of librosa version 0.10.0.\n\tIt will be removed in librosa version 1.0.\n  y, sr_native = __audioread_load(path, offset, duration, dtype)\n 27%|██▋       | 27/100 [00:24<00:54,  1.34it/s]","output_type":"stream"},{"name":"stdout","text":"Error processing /kaggle/input/gtzan-dataset-music-genre-classification/Data/genres_original/jazz/jazz.00054.wav: \n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 100/100 [01:33<00:00,  1.07it/s]\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n# Load your CSV file\ndf = pd.read_csv('/kaggle/working/audio_features.csv')  # Update path\n\n# Convert string representations of arrays to numpy arrays\ndef convert_features(col):\n    return np.array([np.fromstring(x[1:-1], sep=' ') for x in col])\n\n# List of array-type features\narray_features = [\n    'mfcc_mean', 'mfcc_std', 'chroma_mean', 'chroma_std',\n    'contrast_mean', 'contrast_std', 'tonnetz_mean', 'tonnetz_std'\n]\n\n# Convert these columns\nfor feature in array_features:\n    df[feature] = convert_features(df[feature])\n\n# Create feature matrix by combining all features\nX = np.hstack([\n    np.vstack(df['mfcc_mean'].values),\n    np.vstack(df['mfcc_std'].values),\n    np.vstack(df['chroma_mean'].values),\n    np.vstack(df['chroma_std'].values),\n    np.vstack(df['contrast_mean'].values),\n    np.vstack(df['contrast_std'].values),\n    np.vstack(df['tonnetz_mean'].values),\n    np.vstack(df['tonnetz_std'].values),\n    df[['zcr', 'centroid', 'bandwidth', 'rolloff', 'rms']].values\n])\n\n# Prepare labels\ny = df['genre'].values\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded\n)\n\nprint(f\"Training set shape: {X_train.shape}\")\nprint(f\"Test set shape: {X_test.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:54:07.583204Z","iopub.execute_input":"2025-04-02T23:54:07.583542Z","iopub.status.idle":"2025-04-02T23:54:07.934360Z","shell.execute_reply.started":"2025-04-02T23:54:07.583507Z","shell.execute_reply":"2025-04-02T23:54:07.933568Z"}},"outputs":[{"name":"stdout","text":"Training set shape: (239, 13)\nTest set shape: (60, 13)\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Initialize and train the model\nmodel = xgb.XGBClassifier(\n    objective='multi:softmax',\n    num_class=len(label_encoder.classes_),\n    n_estimators=200,\n    max_depth=6,\n    learning_rate=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    random_state=42\n)\n\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:54:07.935442Z","iopub.execute_input":"2025-04-02T23:54:07.935818Z","iopub.status.idle":"2025-04-02T23:54:09.196728Z","shell.execute_reply.started":"2025-04-02T23:54:07.935784Z","shell.execute_reply":"2025-04-02T23:54:09.196053Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n\n# Confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(10, 8))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Spectral',\n            xticklabels=label_encoder.classes_,\n            yticklabels=label_encoder.classes_)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n\n# Feature importance\nplt.figure(figsize=(12, 6))\nxgb.plot_importance(model, max_num_features=20)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:54:09.197245Z","iopub.execute_input":"2025-04-02T23:54:09.197584Z","iopub.status.idle":"2025-04-02T23:54:09.765050Z","shell.execute_reply.started":"2025-04-02T23:54:09.197564Z","shell.execute_reply":"2025-04-02T23:54:09.764114Z"}},"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n       blues       0.68      0.65      0.67        20\n      hiphop       0.94      0.75      0.83        20\n        jazz       0.76      0.95      0.84        20\n\n    accuracy                           0.78        60\n   macro avg       0.79      0.78      0.78        60\nweighted avg       0.79      0.78      0.78        60\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"## Genre Tagging from Text Descriptions","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nimport re\n\n# Sample dataset focused on our three genres\ndata = {\n    'description': [\n        \"soulful guitar with melancholic vocals and 12-bar structure\",\n        \"smooth saxophone solos with complex chord progressions\",\n        \"boom bap beats with rapped verses and scratching\",\n        \"electric guitar riffs with walking bass lines\",\n        \"improvised solos with swing rhythm\",\n        \"sampled breaks with MC vocals\",\n        \"piano blues with raw emotional delivery\",\n        \"drum machine beats with urban lyrics\",\n        \"call-and-response between trumpet and saxophone\",\n        \"delta-style slide guitar with foot-stomping rhythm\"\n    ],\n    'genre': [\n        \"blues\", \"jazz\", \"hiphop\", \"blues\",\n        \"jazz\", \"hiphop\", \"blues\", \"hiphop\",\n        \"jazz\", \"blues\"\n    ]\n}\n\ndf = pd.DataFrame(data)\n\n# Text preprocessing\ndef clean_text(text):\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text\n\n# Create and train model\ngenre_classifier = Pipeline([\n    ('tfidf', TfidfVectorizer(preprocessor=clean_text,\n                             stop_words='english',\n                             ngram_range=(1, 2),\n                             max_features=500)),\n    ('clf', MultinomialNB())\n])\n\ngenre_classifier.fit(df['description'], df['genre'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:54:09.767098Z","iopub.execute_input":"2025-04-02T23:54:09.767321Z","iopub.status.idle":"2025-04-02T23:54:09.836446Z","shell.execute_reply.started":"2025-04-02T23:54:09.767299Z","shell.execute_reply":"2025-04-02T23:54:09.835802Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('tfidf',\n                 TfidfVectorizer(max_features=500, ngram_range=(1, 2),\n                                 preprocessor=<function clean_text at 0x7c794036a4d0>,\n                                 stop_words='english')),\n                ('clf', MultinomialNB())])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;tfidf&#x27;,\n                 TfidfVectorizer(max_features=500, ngram_range=(1, 2),\n                                 preprocessor=&lt;function clean_text at 0x7c794036a4d0&gt;,\n                                 stop_words=&#x27;english&#x27;)),\n                (&#x27;clf&#x27;, MultinomialNB())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;tfidf&#x27;,\n                 TfidfVectorizer(max_features=500, ngram_range=(1, 2),\n                                 preprocessor=&lt;function clean_text at 0x7c794036a4d0&gt;,\n                                 stop_words=&#x27;english&#x27;)),\n                (&#x27;clf&#x27;, MultinomialNB())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfVectorizer</label><div class=\"sk-toggleable__content\"><pre>TfidfVectorizer(max_features=500, ngram_range=(1, 2),\n                preprocessor=&lt;function clean_text at 0x7c794036a4d0&gt;,\n                stop_words=&#x27;english&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"# Focused keyword lists\ngenre_keywords = {\n    \"blues\": [\"guitar\", \"12-bar\", \"melancholic\", \"slide\", \"delta\", \"soulful\", \"harmonica\"],\n    \"hiphop\": [\"rap\", \"beats\", \"mc\", \"sampled\", \"urban\", \"scratch\", \"boom bap\"],\n    \"jazz\": [\"saxophone\", \"improvis\", \"swing\", \"trumpet\", \"chord progress\", \"solos\", \"walking bass\"]\n}\n\ndef suggest_genres(description, audio_genre=None):\n    \n    # Clean and predict\n    cleaned = clean_text(description)\n    main_pred = genre_classifier.predict([cleaned])[0]\n    \n    # Find supporting evidence\n    supporting_genres = []\n    for genre, keywords in genre_keywords.items():\n        if genre != main_pred:\n            if any(keyword in cleaned for keyword in keywords):\n                supporting_genres.append(genre)\n    \n    if audio_genre:\n        if main_pred != audio_genre:\n            supporting_genres.append(main_pred)\n        return sorted(list(set([audio_genre] + supporting_genres)), \n                     key=lambda x: (x != audio_genre, x))\n    \n    return [main_pred] + supporting_genres","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-02T23:54:09.837491Z","iopub.execute_input":"2025-04-02T23:54:09.837840Z","iopub.status.idle":"2025-04-02T23:54:09.843357Z","shell.execute_reply.started":"2025-04-02T23:54:09.837804Z","shell.execute_reply":"2025-04-02T23:54:09.842747Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"def classify_music(audio_path=None, description=None):\n    results = {}\n    if audio_path:\n        audio_genre = predict_genre(audio_path)\n        results['audio_genre'] = audio_genre\n    if description:\n        if audio_path:\n            text_genres = suggest_genres(description, audio_genre)\n            results['combined_genres'] = text_genres\n        else:\n            text_genres = suggest_genres(description)\n            results['text_genres'] = text_genres\n    return results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T00:05:12.059286Z","iopub.execute_input":"2025-04-03T00:05:12.059620Z","iopub.status.idle":"2025-04-03T00:05:12.063947Z","shell.execute_reply.started":"2025-04-03T00:05:12.059593Z","shell.execute_reply":"2025-04-03T00:05:12.063160Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Scenario 1: Text description only\nprint(\"Text-only classification:\")\nprint(classify_music(description=\"a track with smooth saxophone solos and walking bass lines\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T00:05:12.562968Z","iopub.execute_input":"2025-04-03T00:05:12.563245Z","iopub.status.idle":"2025-04-03T00:05:12.568903Z","shell.execute_reply.started":"2025-04-03T00:05:12.563225Z","shell.execute_reply":"2025-04-03T00:05:12.568172Z"}},"outputs":[{"name":"stdout","text":"Text-only classification:\n{'text_genres': ['blues', 'jazz']}\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Generate predictions for evaluation\ny_true = df['genre']\ny_pred = genre_classifier.predict(df['description'])\n\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred, target_names=[\"Blues\", \"Hip-Hop\", \"Jazz\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T00:05:23.320962Z","iopub.execute_input":"2025-04-03T00:05:23.321245Z","iopub.status.idle":"2025-04-03T00:05:23.332992Z","shell.execute_reply.started":"2025-04-03T00:05:23.321222Z","shell.execute_reply":"2025-04-03T00:05:23.332029Z"}},"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n       Blues       1.00      1.00      1.00         4\n     Hip-Hop       1.00      1.00      1.00         3\n        Jazz       1.00      1.00      1.00         3\n\n    accuracy                           1.00        10\n   macro avg       1.00      1.00      1.00        10\nweighted avg       1.00      1.00      1.00        10\n\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}